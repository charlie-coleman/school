
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000008c0  00000954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  00000962  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000baa  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b5  00000000  00000000  00001fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000433  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000329  00000000  00000000  00002ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9e:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <irInit>:
 *  Author: colemanct
 */
 #include <avr/io.h>

void irInit() {
	ADMUX |= (1 << REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC0D);
  ba:	ae e7       	ldi	r26, 0x7E	; 126
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	8c 91       	ld	r24, X
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN);
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <irRead>:
}

uint16_t irRead() {
	ADCSRA |= (1 << ADSC);
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	
	while ( (ADCSRA & (1 << ADSC)) );
  d6:	80 81       	ld	r24, Z
  d8:	86 fd       	sbrc	r24, 6
  da:	fd cf       	rjmp	.-6      	; 0xd6 <irRead+0xa>
	
	return ADC;
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  e4:	08 95       	ret

000000e6 <irLinRead>:

uint16_t irLinRead() {
	uint16_t val = irRead();
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <irRead>
  ea:	bc 01       	movw	r22, r24
	
	return (10000/val);
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	97 e2       	ldi	r25, 0x27	; 39
  f0:	0e 94 4c 01 	call	0x298	; 0x298 <__udivmodhi4>
  f4:	cb 01       	movw	r24, r22
  f6:	08 95       	ret

000000f8 <main>:
	val = (val > MIN_SPEED) ? MIN_SPEED : val;
	
	return val;
}

int main(void) {
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	6e 97       	sbiw	r28, 0x1e	; 30
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
	serialInit();
 10c:	0e 94 2f 01 	call	0x25e	; 0x25e <serialInit>
	pwmInit();
 110:	0e 94 0b 01 	call	0x216	; 0x216 <pwmInit>
	irInit();
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <irInit>
#define MAX_SPEED 1650
#define DESIRED_SPEED 1700
#define MIN_SPEED 1720

int fitInBounds(int val) {
	val = (val < MAX_SPEED) ? MAX_SPEED : val;
 118:	0f 2e       	mov	r0, r31
 11a:	f4 ea       	ldi	r31, 0xA4	; 164
 11c:	af 2e       	mov	r10, r31
 11e:	f6 e0       	ldi	r31, 0x06	; 6
 120:	bf 2e       	mov	r11, r31
 122:	f0 2d       	mov	r31, r0
 124:	0f 2e       	mov	r0, r31
 126:	f2 e7       	ldi	r31, 0x72	; 114
 128:	4f 2e       	mov	r4, r31
 12a:	f0 2d       	mov	r31, r0
 12c:	0f 2e       	mov	r0, r31
 12e:	f6 e0       	ldi	r31, 0x06	; 6
 130:	5f 2e       	mov	r5, r31
 132:	f0 2d       	mov	r31, r0
		
		lMotorSpeed = DESIRED_SPEED - pd/2;
		rMotorSpeed = DESIRED_SPEED + pd/2;
		lMotorSpeed = fitInBounds(lMotorSpeed);
		rMotorSpeed = fitInBounds(rMotorSpeed);
		pwmSet(LEFT_MOTOR, lMotorSpeed);
 134:	0f 2e       	mov	r0, r31
 136:	f8 eb       	ldi	r31, 0xB8	; 184
 138:	6f 2e       	mov	r6, r31
 13a:	f0 2d       	mov	r31, r0
 13c:	0f 2e       	mov	r0, r31
 13e:	f6 e0       	ldi	r31, 0x06	; 6
 140:	7f 2e       	mov	r7, r31
 142:	f0 2d       	mov	r31, r0
		pwmSet(RIGHT_MOTOR, rMotorSpeed);
		
		sprintf(tempString, "PD Out: %d\n\r", irval);
 144:	0f 2e       	mov	r0, r31
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	cf 2e       	mov	r12, r31
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	df 2e       	mov	r13, r31
 14e:	f0 2d       	mov	r31, r0
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	7c 01       	movw	r14, r24
	char tempString[30];
	int rMotorSpeed = DESIRED_SPEED;
	int lMotorSpeed = DESIRED_SPEED;
	
    while (1) {
		uint16_t irval = irLinRead();
 156:	0e 94 73 00 	call	0xe6	; 0xe6 <irLinRead>
 15a:	98 2e       	mov	r9, r24
 15c:	89 2e       	mov	r8, r25
		
		int pd = pdCalc(irval, setPoint);
 15e:	60 e2       	ldi	r22, 0x20	; 32
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <pdCalc>
		
		lMotorSpeed = DESIRED_SPEED - pd/2;
 166:	99 23       	and	r25, r25
 168:	0c f4       	brge	.+2      	; 0x16c <main+0x74>
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	95 95       	asr	r25
 16e:	87 95       	ror	r24
#define MAX_SPEED 1650
#define DESIRED_SPEED 1700
#define MIN_SPEED 1720

int fitInBounds(int val) {
	val = (val < MAX_SPEED) ? MAX_SPEED : val;
 170:	b5 01       	movw	r22, r10
 172:	68 1b       	sub	r22, r24
 174:	79 0b       	sbc	r23, r25
 176:	62 37       	cpi	r22, 0x72	; 114
 178:	26 e0       	ldi	r18, 0x06	; 6
 17a:	72 07       	cpc	r23, r18
 17c:	14 f4       	brge	.+4      	; 0x182 <main+0x8a>
 17e:	64 2d       	mov	r22, r4
 180:	75 2d       	mov	r23, r5
 182:	8c 01       	movw	r16, r24
 184:	0c 55       	subi	r16, 0x5C	; 92
 186:	19 4f       	sbci	r17, 0xF9	; 249
 188:	02 37       	cpi	r16, 0x72	; 114
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	18 07       	cpc	r17, r24
 18e:	14 f4       	brge	.+4      	; 0x194 <main+0x9c>
 190:	04 2d       	mov	r16, r4
 192:	15 2d       	mov	r17, r5
		
		lMotorSpeed = DESIRED_SPEED - pd/2;
		rMotorSpeed = DESIRED_SPEED + pd/2;
		lMotorSpeed = fitInBounds(lMotorSpeed);
		rMotorSpeed = fitInBounds(rMotorSpeed);
		pwmSet(LEFT_MOTOR, lMotorSpeed);
 194:	69 3b       	cpi	r22, 0xB9	; 185
 196:	96 e0       	ldi	r25, 0x06	; 6
 198:	79 07       	cpc	r23, r25
 19a:	14 f0       	brlt	.+4      	; 0x1a0 <main+0xa8>
 19c:	66 2d       	mov	r22, r6
 19e:	77 2d       	mov	r23, r7
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 1c 01 	call	0x238	; 0x238 <pwmSet>
		pwmSet(RIGHT_MOTOR, rMotorSpeed);
 1a8:	b8 01       	movw	r22, r16
 1aa:	09 3b       	cpi	r16, 0xB9	; 185
 1ac:	16 40       	sbci	r17, 0x06	; 6
 1ae:	14 f0       	brlt	.+4      	; 0x1b4 <main+0xbc>
 1b0:	66 2d       	mov	r22, r6
 1b2:	77 2d       	mov	r23, r7
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 1c 01 	call	0x238	; 0x238 <pwmSet>
		
		sprintf(tempString, "PD Out: %d\n\r", irval);
 1bc:	8f 92       	push	r8
 1be:	9f 92       	push	r9
 1c0:	df 92       	push	r13
 1c2:	cf 92       	push	r12
 1c4:	ff 92       	push	r15
 1c6:	ef 92       	push	r14
 1c8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <sprintf>
		serialPrint(tempString);
 1cc:	c7 01       	movw	r24, r14
 1ce:	0e 94 3a 01 	call	0x274	; 0x274 <serialPrint>
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	bb cf       	rjmp	.-138    	; 0x156 <main+0x5e>

000001e0 <pdCalc>:
#define kd 10

int previousError = 0;

int pdCalc(int input, int setPoint) {
	int error = setPoint - input;
 1e0:	68 1b       	sub	r22, r24
 1e2:	79 0b       	sbc	r23, r25
	int diff = error - previousError;
	
	int ret = (int)(kp*error + kd*diff);
 1e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1e8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 1ec:	9b 01       	movw	r18, r22
 1ee:	28 1b       	sub	r18, r24
 1f0:	39 0b       	sbc	r19, r25
 1f2:	26 0f       	add	r18, r22
 1f4:	37 1f       	adc	r19, r23
 1f6:	c9 01       	movw	r24, r18
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
	
	previousError = error;
 208:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <__data_end+0x1>
 20c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_end>
	
	return ret;
 210:	82 0f       	add	r24, r18
 212:	93 1f       	adc	r25, r19
 214:	08 95       	ret

00000216 <pwmInit>:
 *  Author: colemanct
 */
#include <avr/io.h>

void pwmInit() {
	DDRD |= (1 << DDD6);
 216:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << DDD5);
 218:	55 9a       	sbi	0x0a, 5	; 10
	OCR0A = 0;
 21a:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 21c:	18 bc       	out	0x28, r1	; 40
	TCCR0A |= (1 << COM0A1);
 21e:	84 b5       	in	r24, 0x24	; 36
 220:	80 68       	ori	r24, 0x80	; 128
 222:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1);
 224:	84 b5       	in	r24, 0x24	; 36
 226:	80 62       	ori	r24, 0x20	; 32
 228:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 22a:	84 b5       	in	r24, 0x24	; 36
 22c:	83 60       	ori	r24, 0x03	; 3
 22e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);
 230:	85 b5       	in	r24, 0x25	; 37
 232:	85 60       	ori	r24, 0x05	; 5
 234:	85 bd       	out	0x25, r24	; 37
 236:	08 95       	ret

00000238 <pwmSet>:
}

void pwmSet(int motor, int usHigh) {
	if (motor == 1)
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	91 05       	cpc	r25, r1
 23c:	39 f4       	brne	.+14     	; 0x24c <pwmSet+0x14>
		OCR0A = usHigh / 78;
 23e:	cb 01       	movw	r24, r22
 240:	6e e4       	ldi	r22, 0x4E	; 78
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__divmodhi4>
 248:	67 bd       	out	0x27, r22	; 39
 24a:	08 95       	ret
	else if (motor == 2)
 24c:	02 97       	sbiw	r24, 0x02	; 2
 24e:	31 f4       	brne	.+12     	; 0x25c <pwmSet+0x24>
		OCR0B = usHigh / 78;
 250:	cb 01       	movw	r24, r22
 252:	6e e4       	ldi	r22, 0x4E	; 78
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__divmodhi4>
 25a:	68 bd       	out	0x28, r22	; 40
 25c:	08 95       	ret

0000025e <serialInit>:
 *  Author: colemanct
 */
 #include <avr/io.h>

void serialInit() {
	UBRR0H = (unsigned char)(103 >> 8);
 25e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)(103 & 0xFF);
 262:	87 e6       	ldi	r24, 0x67	; 103
 264:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= (1 << RXEN0)|(1<<TXEN0);
 268:	e1 ec       	ldi	r30, 0xC1	; 193
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	88 61       	ori	r24, 0x18	; 24
 270:	80 83       	st	Z, r24
 272:	08 95       	ret

00000274 <serialPrint>:
}

void serialPrint(char* str) {
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	dc 01       	movw	r26, r24
	int i = 0;
	do {
		while((UCSR0A & (1 << UDRE0)) == 0) {}
 27a:	e0 ec       	ldi	r30, 0xC0	; 192
 27c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = str[i];
 27e:	c6 ec       	ldi	r28, 0xC6	; 198
 280:	d0 e0       	ldi	r29, 0x00	; 0
}

void serialPrint(char* str) {
	int i = 0;
	do {
		while((UCSR0A & (1 << UDRE0)) == 0) {}
 282:	90 81       	ld	r25, Z
 284:	95 ff       	sbrs	r25, 5
 286:	fd cf       	rjmp	.-6      	; 0x282 <serialPrint+0xe>
		UDR0 = str[i];
 288:	8d 91       	ld	r24, X+
 28a:	88 83       	st	Y, r24
		i++;
	} while(str[i] != '\0');
 28c:	8c 91       	ld	r24, X
 28e:	81 11       	cpse	r24, r1
 290:	f8 cf       	rjmp	.-16     	; 0x282 <serialPrint+0xe>
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <__udivmodhi4>:
 298:	aa 1b       	sub	r26, r26
 29a:	bb 1b       	sub	r27, r27
 29c:	51 e1       	ldi	r21, 0x11	; 17
 29e:	07 c0       	rjmp	.+14     	; 0x2ae <__udivmodhi4_ep>

000002a0 <__udivmodhi4_loop>:
 2a0:	aa 1f       	adc	r26, r26
 2a2:	bb 1f       	adc	r27, r27
 2a4:	a6 17       	cp	r26, r22
 2a6:	b7 07       	cpc	r27, r23
 2a8:	10 f0       	brcs	.+4      	; 0x2ae <__udivmodhi4_ep>
 2aa:	a6 1b       	sub	r26, r22
 2ac:	b7 0b       	sbc	r27, r23

000002ae <__udivmodhi4_ep>:
 2ae:	88 1f       	adc	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	5a 95       	dec	r21
 2b4:	a9 f7       	brne	.-22     	; 0x2a0 <__udivmodhi4_loop>
 2b6:	80 95       	com	r24
 2b8:	90 95       	com	r25
 2ba:	bc 01       	movw	r22, r24
 2bc:	cd 01       	movw	r24, r26
 2be:	08 95       	ret

000002c0 <__divmodhi4>:
 2c0:	97 fb       	bst	r25, 7
 2c2:	07 2e       	mov	r0, r23
 2c4:	16 f4       	brtc	.+4      	; 0x2ca <__divmodhi4+0xa>
 2c6:	00 94       	com	r0
 2c8:	07 d0       	rcall	.+14     	; 0x2d8 <__divmodhi4_neg1>
 2ca:	77 fd       	sbrc	r23, 7
 2cc:	09 d0       	rcall	.+18     	; 0x2e0 <__divmodhi4_neg2>
 2ce:	0e 94 4c 01 	call	0x298	; 0x298 <__udivmodhi4>
 2d2:	07 fc       	sbrc	r0, 7
 2d4:	05 d0       	rcall	.+10     	; 0x2e0 <__divmodhi4_neg2>
 2d6:	3e f4       	brtc	.+14     	; 0x2e6 <__divmodhi4_exit>

000002d8 <__divmodhi4_neg1>:
 2d8:	90 95       	com	r25
 2da:	81 95       	neg	r24
 2dc:	9f 4f       	sbci	r25, 0xFF	; 255
 2de:	08 95       	ret

000002e0 <__divmodhi4_neg2>:
 2e0:	70 95       	com	r23
 2e2:	61 95       	neg	r22
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255

000002e6 <__divmodhi4_exit>:
 2e6:	08 95       	ret

000002e8 <sprintf>:
 2e8:	ae e0       	ldi	r26, 0x0E	; 14
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	ea e7       	ldi	r30, 0x7A	; 122
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	0c 94 35 04 	jmp	0x86a	; 0x86a <__prologue_saves__+0x1c>
 2f4:	0d 89       	ldd	r16, Y+21	; 0x15
 2f6:	1e 89       	ldd	r17, Y+22	; 0x16
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	8c 83       	std	Y+4, r24	; 0x04
 2fc:	1a 83       	std	Y+2, r17	; 0x02
 2fe:	09 83       	std	Y+1, r16	; 0x01
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	9f e7       	ldi	r25, 0x7F	; 127
 304:	9e 83       	std	Y+6, r25	; 0x06
 306:	8d 83       	std	Y+5, r24	; 0x05
 308:	ae 01       	movw	r20, r28
 30a:	47 5e       	subi	r20, 0xE7	; 231
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
 30e:	6f 89       	ldd	r22, Y+23	; 0x17
 310:	78 8d       	ldd	r23, Y+24	; 0x18
 312:	ce 01       	movw	r24, r28
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	0e 94 96 01 	call	0x32c	; 0x32c <vfprintf>
 31a:	ef 81       	ldd	r30, Y+7	; 0x07
 31c:	f8 85       	ldd	r31, Y+8	; 0x08
 31e:	e0 0f       	add	r30, r16
 320:	f1 1f       	adc	r31, r17
 322:	10 82       	st	Z, r1
 324:	2e 96       	adiw	r28, 0x0e	; 14
 326:	e4 e0       	ldi	r30, 0x04	; 4
 328:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__epilogue_restores__+0x1c>

0000032c <vfprintf>:
 32c:	ab e0       	ldi	r26, 0x0B	; 11
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	ec e9       	ldi	r30, 0x9C	; 156
 332:	f1 e0       	ldi	r31, 0x01	; 1
 334:	0c 94 27 04 	jmp	0x84e	; 0x84e <__prologue_saves__>
 338:	6c 01       	movw	r12, r24
 33a:	7b 01       	movw	r14, r22
 33c:	8a 01       	movw	r16, r20
 33e:	fc 01       	movw	r30, r24
 340:	17 82       	std	Z+7, r1	; 0x07
 342:	16 82       	std	Z+6, r1	; 0x06
 344:	83 81       	ldd	r24, Z+3	; 0x03
 346:	81 ff       	sbrs	r24, 1
 348:	cc c1       	rjmp	.+920    	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 34a:	ce 01       	movw	r24, r28
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	3c 01       	movw	r6, r24
 350:	f6 01       	movw	r30, r12
 352:	93 81       	ldd	r25, Z+3	; 0x03
 354:	f7 01       	movw	r30, r14
 356:	93 fd       	sbrc	r25, 3
 358:	85 91       	lpm	r24, Z+
 35a:	93 ff       	sbrs	r25, 3
 35c:	81 91       	ld	r24, Z+
 35e:	7f 01       	movw	r14, r30
 360:	88 23       	and	r24, r24
 362:	09 f4       	brne	.+2      	; 0x366 <vfprintf+0x3a>
 364:	ba c1       	rjmp	.+884    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 366:	85 32       	cpi	r24, 0x25	; 37
 368:	39 f4       	brne	.+14     	; 0x378 <vfprintf+0x4c>
 36a:	93 fd       	sbrc	r25, 3
 36c:	85 91       	lpm	r24, Z+
 36e:	93 ff       	sbrs	r25, 3
 370:	81 91       	ld	r24, Z+
 372:	7f 01       	movw	r14, r30
 374:	85 32       	cpi	r24, 0x25	; 37
 376:	29 f4       	brne	.+10     	; 0x382 <vfprintf+0x56>
 378:	b6 01       	movw	r22, r12
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 380:	e7 cf       	rjmp	.-50     	; 0x350 <vfprintf+0x24>
 382:	91 2c       	mov	r9, r1
 384:	21 2c       	mov	r2, r1
 386:	31 2c       	mov	r3, r1
 388:	ff e1       	ldi	r31, 0x1F	; 31
 38a:	f3 15       	cp	r31, r3
 38c:	d8 f0       	brcs	.+54     	; 0x3c4 <vfprintf+0x98>
 38e:	8b 32       	cpi	r24, 0x2B	; 43
 390:	79 f0       	breq	.+30     	; 0x3b0 <vfprintf+0x84>
 392:	38 f4       	brcc	.+14     	; 0x3a2 <vfprintf+0x76>
 394:	80 32       	cpi	r24, 0x20	; 32
 396:	79 f0       	breq	.+30     	; 0x3b6 <vfprintf+0x8a>
 398:	83 32       	cpi	r24, 0x23	; 35
 39a:	a1 f4       	brne	.+40     	; 0x3c4 <vfprintf+0x98>
 39c:	23 2d       	mov	r18, r3
 39e:	20 61       	ori	r18, 0x10	; 16
 3a0:	1d c0       	rjmp	.+58     	; 0x3dc <vfprintf+0xb0>
 3a2:	8d 32       	cpi	r24, 0x2D	; 45
 3a4:	61 f0       	breq	.+24     	; 0x3be <vfprintf+0x92>
 3a6:	80 33       	cpi	r24, 0x30	; 48
 3a8:	69 f4       	brne	.+26     	; 0x3c4 <vfprintf+0x98>
 3aa:	23 2d       	mov	r18, r3
 3ac:	21 60       	ori	r18, 0x01	; 1
 3ae:	16 c0       	rjmp	.+44     	; 0x3dc <vfprintf+0xb0>
 3b0:	83 2d       	mov	r24, r3
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	38 2e       	mov	r3, r24
 3b6:	e3 2d       	mov	r30, r3
 3b8:	e4 60       	ori	r30, 0x04	; 4
 3ba:	3e 2e       	mov	r3, r30
 3bc:	2a c0       	rjmp	.+84     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3be:	f3 2d       	mov	r31, r3
 3c0:	f8 60       	ori	r31, 0x08	; 8
 3c2:	1d c0       	rjmp	.+58     	; 0x3fe <vfprintf+0xd2>
 3c4:	37 fc       	sbrc	r3, 7
 3c6:	2d c0       	rjmp	.+90     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3c8:	20 ed       	ldi	r18, 0xD0	; 208
 3ca:	28 0f       	add	r18, r24
 3cc:	2a 30       	cpi	r18, 0x0A	; 10
 3ce:	40 f0       	brcs	.+16     	; 0x3e0 <vfprintf+0xb4>
 3d0:	8e 32       	cpi	r24, 0x2E	; 46
 3d2:	b9 f4       	brne	.+46     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3d4:	36 fc       	sbrc	r3, 6
 3d6:	81 c1       	rjmp	.+770    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 3d8:	23 2d       	mov	r18, r3
 3da:	20 64       	ori	r18, 0x40	; 64
 3dc:	32 2e       	mov	r3, r18
 3de:	19 c0       	rjmp	.+50     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3e0:	36 fe       	sbrs	r3, 6
 3e2:	06 c0       	rjmp	.+12     	; 0x3f0 <vfprintf+0xc4>
 3e4:	8a e0       	ldi	r24, 0x0A	; 10
 3e6:	98 9e       	mul	r9, r24
 3e8:	20 0d       	add	r18, r0
 3ea:	11 24       	eor	r1, r1
 3ec:	92 2e       	mov	r9, r18
 3ee:	11 c0       	rjmp	.+34     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f0:	ea e0       	ldi	r30, 0x0A	; 10
 3f2:	2e 9e       	mul	r2, r30
 3f4:	20 0d       	add	r18, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	22 2e       	mov	r2, r18
 3fa:	f3 2d       	mov	r31, r3
 3fc:	f0 62       	ori	r31, 0x20	; 32
 3fe:	3f 2e       	mov	r3, r31
 400:	08 c0       	rjmp	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 402:	8c 36       	cpi	r24, 0x6C	; 108
 404:	21 f4       	brne	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 406:	83 2d       	mov	r24, r3
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	38 2e       	mov	r3, r24
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	88 36       	cpi	r24, 0x68	; 104
 410:	41 f4       	brne	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 412:	f7 01       	movw	r30, r14
 414:	93 fd       	sbrc	r25, 3
 416:	85 91       	lpm	r24, Z+
 418:	93 ff       	sbrs	r25, 3
 41a:	81 91       	ld	r24, Z+
 41c:	7f 01       	movw	r14, r30
 41e:	81 11       	cpse	r24, r1
 420:	b3 cf       	rjmp	.-154    	; 0x388 <vfprintf+0x5c>
 422:	98 2f       	mov	r25, r24
 424:	9f 7d       	andi	r25, 0xDF	; 223
 426:	95 54       	subi	r25, 0x45	; 69
 428:	93 30       	cpi	r25, 0x03	; 3
 42a:	28 f4       	brcc	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42c:	0c 5f       	subi	r16, 0xFC	; 252
 42e:	1f 4f       	sbci	r17, 0xFF	; 255
 430:	9f e3       	ldi	r25, 0x3F	; 63
 432:	99 83       	std	Y+1, r25	; 0x01
 434:	0d c0       	rjmp	.+26     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 436:	83 36       	cpi	r24, 0x63	; 99
 438:	31 f0       	breq	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 43a:	83 37       	cpi	r24, 0x73	; 115
 43c:	71 f0       	breq	.+28     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43e:	83 35       	cpi	r24, 0x53	; 83
 440:	09 f0       	breq	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	59 c0       	rjmp	.+178    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 444:	21 c0       	rjmp	.+66     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 446:	f8 01       	movw	r30, r16
 448:	80 81       	ld	r24, Z
 44a:	89 83       	std	Y+1, r24	; 0x01
 44c:	0e 5f       	subi	r16, 0xFE	; 254
 44e:	1f 4f       	sbci	r17, 0xFF	; 255
 450:	88 24       	eor	r8, r8
 452:	83 94       	inc	r8
 454:	91 2c       	mov	r9, r1
 456:	53 01       	movw	r10, r6
 458:	13 c0       	rjmp	.+38     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 45a:	28 01       	movw	r4, r16
 45c:	f2 e0       	ldi	r31, 0x02	; 2
 45e:	4f 0e       	add	r4, r31
 460:	51 1c       	adc	r5, r1
 462:	f8 01       	movw	r30, r16
 464:	a0 80       	ld	r10, Z
 466:	b1 80       	ldd	r11, Z+1	; 0x01
 468:	36 fe       	sbrs	r3, 6
 46a:	03 c0       	rjmp	.+6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46c:	69 2d       	mov	r22, r9
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	6f ef       	ldi	r22, 0xFF	; 255
 474:	7f ef       	ldi	r23, 0xFF	; 255
 476:	c5 01       	movw	r24, r10
 478:	0e 94 82 03 	call	0x704	; 0x704 <strnlen>
 47c:	4c 01       	movw	r8, r24
 47e:	82 01       	movw	r16, r4
 480:	f3 2d       	mov	r31, r3
 482:	ff 77       	andi	r31, 0x7F	; 127
 484:	3f 2e       	mov	r3, r31
 486:	16 c0       	rjmp	.+44     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 488:	28 01       	movw	r4, r16
 48a:	22 e0       	ldi	r18, 0x02	; 2
 48c:	42 0e       	add	r4, r18
 48e:	51 1c       	adc	r5, r1
 490:	f8 01       	movw	r30, r16
 492:	a0 80       	ld	r10, Z
 494:	b1 80       	ldd	r11, Z+1	; 0x01
 496:	36 fe       	sbrs	r3, 6
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49a:	69 2d       	mov	r22, r9
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a0:	6f ef       	ldi	r22, 0xFF	; 255
 4a2:	7f ef       	ldi	r23, 0xFF	; 255
 4a4:	c5 01       	movw	r24, r10
 4a6:	0e 94 77 03 	call	0x6ee	; 0x6ee <strnlen_P>
 4aa:	4c 01       	movw	r8, r24
 4ac:	f3 2d       	mov	r31, r3
 4ae:	f0 68       	ori	r31, 0x80	; 128
 4b0:	3f 2e       	mov	r3, r31
 4b2:	82 01       	movw	r16, r4
 4b4:	33 fc       	sbrc	r3, 3
 4b6:	1b c0       	rjmp	.+54     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4b8:	82 2d       	mov	r24, r2
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	88 16       	cp	r8, r24
 4be:	99 06       	cpc	r9, r25
 4c0:	b0 f4       	brcc	.+44     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4c2:	b6 01       	movw	r22, r12
 4c4:	80 e2       	ldi	r24, 0x20	; 32
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 4cc:	2a 94       	dec	r2
 4ce:	f4 cf       	rjmp	.-24     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4d0:	f5 01       	movw	r30, r10
 4d2:	37 fc       	sbrc	r3, 7
 4d4:	85 91       	lpm	r24, Z+
 4d6:	37 fe       	sbrs	r3, 7
 4d8:	81 91       	ld	r24, Z+
 4da:	5f 01       	movw	r10, r30
 4dc:	b6 01       	movw	r22, r12
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 4e4:	21 10       	cpse	r2, r1
 4e6:	2a 94       	dec	r2
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	82 1a       	sub	r8, r18
 4ec:	91 08       	sbc	r9, r1
 4ee:	81 14       	cp	r8, r1
 4f0:	91 04       	cpc	r9, r1
 4f2:	71 f7       	brne	.-36     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4f4:	e8 c0       	rjmp	.+464    	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 4f6:	84 36       	cpi	r24, 0x64	; 100
 4f8:	11 f0       	breq	.+4      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4fa:	89 36       	cpi	r24, 0x69	; 105
 4fc:	41 f5       	brne	.+80     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 4fe:	f8 01       	movw	r30, r16
 500:	37 fe       	sbrs	r3, 7
 502:	07 c0       	rjmp	.+14     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 504:	60 81       	ld	r22, Z
 506:	71 81       	ldd	r23, Z+1	; 0x01
 508:	82 81       	ldd	r24, Z+2	; 0x02
 50a:	93 81       	ldd	r25, Z+3	; 0x03
 50c:	0c 5f       	subi	r16, 0xFC	; 252
 50e:	1f 4f       	sbci	r17, 0xFF	; 255
 510:	08 c0       	rjmp	.+16     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 512:	60 81       	ld	r22, Z
 514:	71 81       	ldd	r23, Z+1	; 0x01
 516:	07 2e       	mov	r0, r23
 518:	00 0c       	add	r0, r0
 51a:	88 0b       	sbc	r24, r24
 51c:	99 0b       	sbc	r25, r25
 51e:	0e 5f       	subi	r16, 0xFE	; 254
 520:	1f 4f       	sbci	r17, 0xFF	; 255
 522:	f3 2d       	mov	r31, r3
 524:	ff 76       	andi	r31, 0x6F	; 111
 526:	3f 2e       	mov	r3, r31
 528:	97 ff       	sbrs	r25, 7
 52a:	09 c0       	rjmp	.+18     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 52c:	90 95       	com	r25
 52e:	80 95       	com	r24
 530:	70 95       	com	r23
 532:	61 95       	neg	r22
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	8f 4f       	sbci	r24, 0xFF	; 255
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	f0 68       	ori	r31, 0x80	; 128
 53c:	3f 2e       	mov	r3, r31
 53e:	2a e0       	ldi	r18, 0x0A	; 10
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	a3 01       	movw	r20, r6
 544:	0e 94 c9 03 	call	0x792	; 0x792 <__ultoa_invert>
 548:	88 2e       	mov	r8, r24
 54a:	86 18       	sub	r8, r6
 54c:	45 c0       	rjmp	.+138    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 54e:	85 37       	cpi	r24, 0x75	; 117
 550:	31 f4       	brne	.+12     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 552:	23 2d       	mov	r18, r3
 554:	2f 7e       	andi	r18, 0xEF	; 239
 556:	b2 2e       	mov	r11, r18
 558:	2a e0       	ldi	r18, 0x0A	; 10
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	25 c0       	rjmp	.+74     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 55e:	93 2d       	mov	r25, r3
 560:	99 7f       	andi	r25, 0xF9	; 249
 562:	b9 2e       	mov	r11, r25
 564:	8f 36       	cpi	r24, 0x6F	; 111
 566:	c1 f0       	breq	.+48     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 568:	18 f4       	brcc	.+6      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 56a:	88 35       	cpi	r24, 0x58	; 88
 56c:	79 f0       	breq	.+30     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 56e:	b5 c0       	rjmp	.+362    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 570:	80 37       	cpi	r24, 0x70	; 112
 572:	19 f0       	breq	.+6      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 574:	88 37       	cpi	r24, 0x78	; 120
 576:	21 f0       	breq	.+8      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 578:	b0 c0       	rjmp	.+352    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 57a:	e9 2f       	mov	r30, r25
 57c:	e0 61       	ori	r30, 0x10	; 16
 57e:	be 2e       	mov	r11, r30
 580:	b4 fe       	sbrs	r11, 4
 582:	0d c0       	rjmp	.+26     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 584:	fb 2d       	mov	r31, r11
 586:	f4 60       	ori	r31, 0x04	; 4
 588:	bf 2e       	mov	r11, r31
 58a:	09 c0       	rjmp	.+18     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 58c:	34 fe       	sbrs	r3, 4
 58e:	0a c0       	rjmp	.+20     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 590:	29 2f       	mov	r18, r25
 592:	26 60       	ori	r18, 0x06	; 6
 594:	b2 2e       	mov	r11, r18
 596:	06 c0       	rjmp	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 598:	28 e0       	ldi	r18, 0x08	; 8
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 59e:	20 e1       	ldi	r18, 0x10	; 16
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5a4:	20 e1       	ldi	r18, 0x10	; 16
 5a6:	32 e0       	ldi	r19, 0x02	; 2
 5a8:	f8 01       	movw	r30, r16
 5aa:	b7 fe       	sbrs	r11, 7
 5ac:	07 c0       	rjmp	.+14     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5ae:	60 81       	ld	r22, Z
 5b0:	71 81       	ldd	r23, Z+1	; 0x01
 5b2:	82 81       	ldd	r24, Z+2	; 0x02
 5b4:	93 81       	ldd	r25, Z+3	; 0x03
 5b6:	0c 5f       	subi	r16, 0xFC	; 252
 5b8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5bc:	60 81       	ld	r22, Z
 5be:	71 81       	ldd	r23, Z+1	; 0x01
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 5f       	subi	r16, 0xFE	; 254
 5c6:	1f 4f       	sbci	r17, 0xFF	; 255
 5c8:	a3 01       	movw	r20, r6
 5ca:	0e 94 c9 03 	call	0x792	; 0x792 <__ultoa_invert>
 5ce:	88 2e       	mov	r8, r24
 5d0:	86 18       	sub	r8, r6
 5d2:	fb 2d       	mov	r31, r11
 5d4:	ff 77       	andi	r31, 0x7F	; 127
 5d6:	3f 2e       	mov	r3, r31
 5d8:	36 fe       	sbrs	r3, 6
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5dc:	23 2d       	mov	r18, r3
 5de:	2e 7f       	andi	r18, 0xFE	; 254
 5e0:	a2 2e       	mov	r10, r18
 5e2:	89 14       	cp	r8, r9
 5e4:	58 f4       	brcc	.+22     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5e6:	34 fe       	sbrs	r3, 4
 5e8:	0b c0       	rjmp	.+22     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5ea:	32 fc       	sbrc	r3, 2
 5ec:	09 c0       	rjmp	.+18     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5ee:	83 2d       	mov	r24, r3
 5f0:	8e 7e       	andi	r24, 0xEE	; 238
 5f2:	a8 2e       	mov	r10, r24
 5f4:	05 c0       	rjmp	.+10     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5f6:	b8 2c       	mov	r11, r8
 5f8:	a3 2c       	mov	r10, r3
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5fc:	b8 2c       	mov	r11, r8
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 600:	b9 2c       	mov	r11, r9
 602:	a4 fe       	sbrs	r10, 4
 604:	0f c0       	rjmp	.+30     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 606:	fe 01       	movw	r30, r28
 608:	e8 0d       	add	r30, r8
 60a:	f1 1d       	adc	r31, r1
 60c:	80 81       	ld	r24, Z
 60e:	80 33       	cpi	r24, 0x30	; 48
 610:	21 f4       	brne	.+8      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 612:	9a 2d       	mov	r25, r10
 614:	99 7e       	andi	r25, 0xE9	; 233
 616:	a9 2e       	mov	r10, r25
 618:	09 c0       	rjmp	.+18     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 61a:	a2 fe       	sbrs	r10, 2
 61c:	06 c0       	rjmp	.+12     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 61e:	b3 94       	inc	r11
 620:	b3 94       	inc	r11
 622:	04 c0       	rjmp	.+8      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 624:	8a 2d       	mov	r24, r10
 626:	86 78       	andi	r24, 0x86	; 134
 628:	09 f0       	breq	.+2      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 62a:	b3 94       	inc	r11
 62c:	a3 fc       	sbrc	r10, 3
 62e:	11 c0       	rjmp	.+34     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 630:	a0 fe       	sbrs	r10, 0
 632:	06 c0       	rjmp	.+12     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 634:	b2 14       	cp	r11, r2
 636:	88 f4       	brcc	.+34     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 638:	28 0c       	add	r2, r8
 63a:	92 2c       	mov	r9, r2
 63c:	9b 18       	sub	r9, r11
 63e:	0e c0       	rjmp	.+28     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 640:	b2 14       	cp	r11, r2
 642:	60 f4       	brcc	.+24     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 644:	b6 01       	movw	r22, r12
 646:	80 e2       	ldi	r24, 0x20	; 32
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 64e:	b3 94       	inc	r11
 650:	f7 cf       	rjmp	.-18     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 652:	b2 14       	cp	r11, r2
 654:	18 f4       	brcc	.+6      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 656:	2b 18       	sub	r2, r11
 658:	02 c0       	rjmp	.+4      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 65a:	98 2c       	mov	r9, r8
 65c:	21 2c       	mov	r2, r1
 65e:	a4 fe       	sbrs	r10, 4
 660:	10 c0       	rjmp	.+32     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 662:	b6 01       	movw	r22, r12
 664:	80 e3       	ldi	r24, 0x30	; 48
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 66c:	a2 fe       	sbrs	r10, 2
 66e:	17 c0       	rjmp	.+46     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 670:	a1 fc       	sbrc	r10, 1
 672:	03 c0       	rjmp	.+6      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 674:	88 e7       	ldi	r24, 0x78	; 120
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 67a:	88 e5       	ldi	r24, 0x58	; 88
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	b6 01       	movw	r22, r12
 680:	0c c0       	rjmp	.+24     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 682:	8a 2d       	mov	r24, r10
 684:	86 78       	andi	r24, 0x86	; 134
 686:	59 f0       	breq	.+22     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 688:	a1 fe       	sbrs	r10, 1
 68a:	02 c0       	rjmp	.+4      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 68c:	8b e2       	ldi	r24, 0x2B	; 43
 68e:	01 c0       	rjmp	.+2      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 690:	80 e2       	ldi	r24, 0x20	; 32
 692:	a7 fc       	sbrc	r10, 7
 694:	8d e2       	ldi	r24, 0x2D	; 45
 696:	b6 01       	movw	r22, r12
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 69e:	89 14       	cp	r8, r9
 6a0:	38 f4       	brcc	.+14     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 6a2:	b6 01       	movw	r22, r12
 6a4:	80 e3       	ldi	r24, 0x30	; 48
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 6ac:	9a 94       	dec	r9
 6ae:	f7 cf       	rjmp	.-18     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 6b0:	8a 94       	dec	r8
 6b2:	f3 01       	movw	r30, r6
 6b4:	e8 0d       	add	r30, r8
 6b6:	f1 1d       	adc	r31, r1
 6b8:	80 81       	ld	r24, Z
 6ba:	b6 01       	movw	r22, r12
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 6c2:	81 10       	cpse	r8, r1
 6c4:	f5 cf       	rjmp	.-22     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 6c6:	22 20       	and	r2, r2
 6c8:	09 f4       	brne	.+2      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6ca:	42 ce       	rjmp	.-892    	; 0x350 <vfprintf+0x24>
 6cc:	b6 01       	movw	r22, r12
 6ce:	80 e2       	ldi	r24, 0x20	; 32
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 6d6:	2a 94       	dec	r2
 6d8:	f6 cf       	rjmp	.-20     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6da:	f6 01       	movw	r30, r12
 6dc:	86 81       	ldd	r24, Z+6	; 0x06
 6de:	97 81       	ldd	r25, Z+7	; 0x07
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	9f ef       	ldi	r25, 0xFF	; 255
 6e6:	2b 96       	adiw	r28, 0x0b	; 11
 6e8:	e2 e1       	ldi	r30, 0x12	; 18
 6ea:	0c 94 43 04 	jmp	0x886	; 0x886 <__epilogue_restores__>

000006ee <strnlen_P>:
 6ee:	fc 01       	movw	r30, r24
 6f0:	05 90       	lpm	r0, Z+
 6f2:	61 50       	subi	r22, 0x01	; 1
 6f4:	70 40       	sbci	r23, 0x00	; 0
 6f6:	01 10       	cpse	r0, r1
 6f8:	d8 f7       	brcc	.-10     	; 0x6f0 <strnlen_P+0x2>
 6fa:	80 95       	com	r24
 6fc:	90 95       	com	r25
 6fe:	8e 0f       	add	r24, r30
 700:	9f 1f       	adc	r25, r31
 702:	08 95       	ret

00000704 <strnlen>:
 704:	fc 01       	movw	r30, r24
 706:	61 50       	subi	r22, 0x01	; 1
 708:	70 40       	sbci	r23, 0x00	; 0
 70a:	01 90       	ld	r0, Z+
 70c:	01 10       	cpse	r0, r1
 70e:	d8 f7       	brcc	.-10     	; 0x706 <strnlen+0x2>
 710:	80 95       	com	r24
 712:	90 95       	com	r25
 714:	8e 0f       	add	r24, r30
 716:	9f 1f       	adc	r25, r31
 718:	08 95       	ret

0000071a <fputc>:
 71a:	0f 93       	push	r16
 71c:	1f 93       	push	r17
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	fb 01       	movw	r30, r22
 724:	23 81       	ldd	r18, Z+3	; 0x03
 726:	21 fd       	sbrc	r18, 1
 728:	03 c0       	rjmp	.+6      	; 0x730 <fputc+0x16>
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	9f ef       	ldi	r25, 0xFF	; 255
 72e:	2c c0       	rjmp	.+88     	; 0x788 <fputc+0x6e>
 730:	22 ff       	sbrs	r18, 2
 732:	16 c0       	rjmp	.+44     	; 0x760 <fputc+0x46>
 734:	46 81       	ldd	r20, Z+6	; 0x06
 736:	57 81       	ldd	r21, Z+7	; 0x07
 738:	24 81       	ldd	r18, Z+4	; 0x04
 73a:	35 81       	ldd	r19, Z+5	; 0x05
 73c:	42 17       	cp	r20, r18
 73e:	53 07       	cpc	r21, r19
 740:	44 f4       	brge	.+16     	; 0x752 <fputc+0x38>
 742:	a0 81       	ld	r26, Z
 744:	b1 81       	ldd	r27, Z+1	; 0x01
 746:	9d 01       	movw	r18, r26
 748:	2f 5f       	subi	r18, 0xFF	; 255
 74a:	3f 4f       	sbci	r19, 0xFF	; 255
 74c:	31 83       	std	Z+1, r19	; 0x01
 74e:	20 83       	st	Z, r18
 750:	8c 93       	st	X, r24
 752:	26 81       	ldd	r18, Z+6	; 0x06
 754:	37 81       	ldd	r19, Z+7	; 0x07
 756:	2f 5f       	subi	r18, 0xFF	; 255
 758:	3f 4f       	sbci	r19, 0xFF	; 255
 75a:	37 83       	std	Z+7, r19	; 0x07
 75c:	26 83       	std	Z+6, r18	; 0x06
 75e:	14 c0       	rjmp	.+40     	; 0x788 <fputc+0x6e>
 760:	8b 01       	movw	r16, r22
 762:	ec 01       	movw	r28, r24
 764:	fb 01       	movw	r30, r22
 766:	00 84       	ldd	r0, Z+8	; 0x08
 768:	f1 85       	ldd	r31, Z+9	; 0x09
 76a:	e0 2d       	mov	r30, r0
 76c:	09 95       	icall
 76e:	89 2b       	or	r24, r25
 770:	e1 f6       	brne	.-72     	; 0x72a <fputc+0x10>
 772:	d8 01       	movw	r26, r16
 774:	16 96       	adiw	r26, 0x06	; 6
 776:	8d 91       	ld	r24, X+
 778:	9c 91       	ld	r25, X
 77a:	17 97       	sbiw	r26, 0x07	; 7
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	17 96       	adiw	r26, 0x07	; 7
 780:	9c 93       	st	X, r25
 782:	8e 93       	st	-X, r24
 784:	16 97       	sbiw	r26, 0x06	; 6
 786:	ce 01       	movw	r24, r28
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	08 95       	ret

00000792 <__ultoa_invert>:
 792:	fa 01       	movw	r30, r20
 794:	aa 27       	eor	r26, r26
 796:	28 30       	cpi	r18, 0x08	; 8
 798:	51 f1       	breq	.+84     	; 0x7ee <__ultoa_invert+0x5c>
 79a:	20 31       	cpi	r18, 0x10	; 16
 79c:	81 f1       	breq	.+96     	; 0x7fe <__ultoa_invert+0x6c>
 79e:	e8 94       	clt
 7a0:	6f 93       	push	r22
 7a2:	6e 7f       	andi	r22, 0xFE	; 254
 7a4:	6e 5f       	subi	r22, 0xFE	; 254
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	af 4f       	sbci	r26, 0xFF	; 255
 7ae:	b1 e0       	ldi	r27, 0x01	; 1
 7b0:	3e d0       	rcall	.+124    	; 0x82e <__ultoa_invert+0x9c>
 7b2:	b4 e0       	ldi	r27, 0x04	; 4
 7b4:	3c d0       	rcall	.+120    	; 0x82e <__ultoa_invert+0x9c>
 7b6:	67 0f       	add	r22, r23
 7b8:	78 1f       	adc	r23, r24
 7ba:	89 1f       	adc	r24, r25
 7bc:	9a 1f       	adc	r25, r26
 7be:	a1 1d       	adc	r26, r1
 7c0:	68 0f       	add	r22, r24
 7c2:	79 1f       	adc	r23, r25
 7c4:	8a 1f       	adc	r24, r26
 7c6:	91 1d       	adc	r25, r1
 7c8:	a1 1d       	adc	r26, r1
 7ca:	6a 0f       	add	r22, r26
 7cc:	71 1d       	adc	r23, r1
 7ce:	81 1d       	adc	r24, r1
 7d0:	91 1d       	adc	r25, r1
 7d2:	a1 1d       	adc	r26, r1
 7d4:	20 d0       	rcall	.+64     	; 0x816 <__ultoa_invert+0x84>
 7d6:	09 f4       	brne	.+2      	; 0x7da <__ultoa_invert+0x48>
 7d8:	68 94       	set
 7da:	3f 91       	pop	r19
 7dc:	2a e0       	ldi	r18, 0x0A	; 10
 7de:	26 9f       	mul	r18, r22
 7e0:	11 24       	eor	r1, r1
 7e2:	30 19       	sub	r19, r0
 7e4:	30 5d       	subi	r19, 0xD0	; 208
 7e6:	31 93       	st	Z+, r19
 7e8:	de f6       	brtc	.-74     	; 0x7a0 <__ultoa_invert+0xe>
 7ea:	cf 01       	movw	r24, r30
 7ec:	08 95       	ret
 7ee:	46 2f       	mov	r20, r22
 7f0:	47 70       	andi	r20, 0x07	; 7
 7f2:	40 5d       	subi	r20, 0xD0	; 208
 7f4:	41 93       	st	Z+, r20
 7f6:	b3 e0       	ldi	r27, 0x03	; 3
 7f8:	0f d0       	rcall	.+30     	; 0x818 <__ultoa_invert+0x86>
 7fa:	c9 f7       	brne	.-14     	; 0x7ee <__ultoa_invert+0x5c>
 7fc:	f6 cf       	rjmp	.-20     	; 0x7ea <__ultoa_invert+0x58>
 7fe:	46 2f       	mov	r20, r22
 800:	4f 70       	andi	r20, 0x0F	; 15
 802:	40 5d       	subi	r20, 0xD0	; 208
 804:	4a 33       	cpi	r20, 0x3A	; 58
 806:	18 f0       	brcs	.+6      	; 0x80e <__ultoa_invert+0x7c>
 808:	49 5d       	subi	r20, 0xD9	; 217
 80a:	31 fd       	sbrc	r19, 1
 80c:	40 52       	subi	r20, 0x20	; 32
 80e:	41 93       	st	Z+, r20
 810:	02 d0       	rcall	.+4      	; 0x816 <__ultoa_invert+0x84>
 812:	a9 f7       	brne	.-22     	; 0x7fe <__ultoa_invert+0x6c>
 814:	ea cf       	rjmp	.-44     	; 0x7ea <__ultoa_invert+0x58>
 816:	b4 e0       	ldi	r27, 0x04	; 4
 818:	a6 95       	lsr	r26
 81a:	97 95       	ror	r25
 81c:	87 95       	ror	r24
 81e:	77 95       	ror	r23
 820:	67 95       	ror	r22
 822:	ba 95       	dec	r27
 824:	c9 f7       	brne	.-14     	; 0x818 <__ultoa_invert+0x86>
 826:	00 97       	sbiw	r24, 0x00	; 0
 828:	61 05       	cpc	r22, r1
 82a:	71 05       	cpc	r23, r1
 82c:	08 95       	ret
 82e:	9b 01       	movw	r18, r22
 830:	ac 01       	movw	r20, r24
 832:	0a 2e       	mov	r0, r26
 834:	06 94       	lsr	r0
 836:	57 95       	ror	r21
 838:	47 95       	ror	r20
 83a:	37 95       	ror	r19
 83c:	27 95       	ror	r18
 83e:	ba 95       	dec	r27
 840:	c9 f7       	brne	.-14     	; 0x834 <__ultoa_invert+0xa2>
 842:	62 0f       	add	r22, r18
 844:	73 1f       	adc	r23, r19
 846:	84 1f       	adc	r24, r20
 848:	95 1f       	adc	r25, r21
 84a:	a0 1d       	adc	r26, r0
 84c:	08 95       	ret

0000084e <__prologue_saves__>:
 84e:	2f 92       	push	r2
 850:	3f 92       	push	r3
 852:	4f 92       	push	r4
 854:	5f 92       	push	r5
 856:	6f 92       	push	r6
 858:	7f 92       	push	r7
 85a:	8f 92       	push	r8
 85c:	9f 92       	push	r9
 85e:	af 92       	push	r10
 860:	bf 92       	push	r11
 862:	cf 92       	push	r12
 864:	df 92       	push	r13
 866:	ef 92       	push	r14
 868:	ff 92       	push	r15
 86a:	0f 93       	push	r16
 86c:	1f 93       	push	r17
 86e:	cf 93       	push	r28
 870:	df 93       	push	r29
 872:	cd b7       	in	r28, 0x3d	; 61
 874:	de b7       	in	r29, 0x3e	; 62
 876:	ca 1b       	sub	r28, r26
 878:	db 0b       	sbc	r29, r27
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	f8 94       	cli
 87e:	de bf       	out	0x3e, r29	; 62
 880:	0f be       	out	0x3f, r0	; 63
 882:	cd bf       	out	0x3d, r28	; 61
 884:	09 94       	ijmp

00000886 <__epilogue_restores__>:
 886:	2a 88       	ldd	r2, Y+18	; 0x12
 888:	39 88       	ldd	r3, Y+17	; 0x11
 88a:	48 88       	ldd	r4, Y+16	; 0x10
 88c:	5f 84       	ldd	r5, Y+15	; 0x0f
 88e:	6e 84       	ldd	r6, Y+14	; 0x0e
 890:	7d 84       	ldd	r7, Y+13	; 0x0d
 892:	8c 84       	ldd	r8, Y+12	; 0x0c
 894:	9b 84       	ldd	r9, Y+11	; 0x0b
 896:	aa 84       	ldd	r10, Y+10	; 0x0a
 898:	b9 84       	ldd	r11, Y+9	; 0x09
 89a:	c8 84       	ldd	r12, Y+8	; 0x08
 89c:	df 80       	ldd	r13, Y+7	; 0x07
 89e:	ee 80       	ldd	r14, Y+6	; 0x06
 8a0:	fd 80       	ldd	r15, Y+5	; 0x05
 8a2:	0c 81       	ldd	r16, Y+4	; 0x04
 8a4:	1b 81       	ldd	r17, Y+3	; 0x03
 8a6:	aa 81       	ldd	r26, Y+2	; 0x02
 8a8:	b9 81       	ldd	r27, Y+1	; 0x01
 8aa:	ce 0f       	add	r28, r30
 8ac:	d1 1d       	adc	r29, r1
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	f8 94       	cli
 8b2:	de bf       	out	0x3e, r29	; 62
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	cd bf       	out	0x3d, r28	; 61
 8b8:	ed 01       	movw	r28, r26
 8ba:	08 95       	ret

000008bc <_exit>:
 8bc:	f8 94       	cli

000008be <__stop_program>:
 8be:	ff cf       	rjmp	.-2      	; 0x8be <__stop_program>
